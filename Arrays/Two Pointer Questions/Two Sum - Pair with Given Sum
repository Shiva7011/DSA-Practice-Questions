Given an array arr[] of positive integers and another integer target. Determine if there exists two distinct indices such that the sum of there elements is equals to target.
Examples:
Input: arr[] = [1, 4, 45, 6, 10, 8], target = 16
Output: true
Explanation: arr[3] + arr[4] = 6 + 10 = 16.


// Brute force 
class Solution {
    boolean twoSum(int arr[], int target) {
        // code here
        int n=arr.length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]+arr[j]==target) return true;
            }
        }
        return false;
    }
}



// Using Binary Search

class Solution {
    boolean twoSum(int arr[], int target) {
        // code here
        
    // Function to perform binary search static boolean twoSum(int[] arr, int target){
        
        // Sort the array
        Arrays.sort(arr);

        // Iterate through each element in the array
        for (int i = 0; i < arr.length; i++) {
            int complement = target - arr[i];

            // Use binary search to find the complement
            if (binarySearch(arr, i + 1, arr.length - 1,
                             complement))
                return true;
        }
        // If no pair is found
        return false;
    }
    static boolean binarySearch(int[] arr, int left,
                                int right, int target){
        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target)
                return true;
            if (arr[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return false;
    }
}


//BY sort Array
class Solution {
    boolean twoSum(int arr[], int target) {
        // code here
        int n=arr.length;
        int left =0;
        int right=n-1;
        Arrays.sort(arr);
        while(left<right){
            int sum=arr[left]+arr[right];
            if(sum==target){
                return true;
            }
            else if(sum>target){
                right--;
            }
            else{
                left++;
            }
        }
        return false;
        
    }
}
