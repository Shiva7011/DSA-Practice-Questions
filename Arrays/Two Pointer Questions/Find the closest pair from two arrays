Given two sorted arrays arr and brr and a number x, find the pair whose sum is closest to x and the pair has an element from each array. In the case of multiple closest pairs return any one of them.

Example 1:
Input : N = 4, M = 4
arr[ ] = {1, 4, 5, 7}
brr[ ] = {10, 20, 30, 40} 
X = 32
Output : 
1, 30

// brute force approach

class Solution{
// Function for finding maximum and value pair
    public static ArrayList<Integer> printClosest (int arr[], int brr[], int n, int m, int x) {
        // code here
        ArrayList<Integer> result=new ArrayList<>();
        result.add(0,0);
        result.add(1,0);
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int res=Math.abs((arr[i]+brr[j])-x);
                if(res<min){
                    min=res;
                    result.set(0,arr[i]);
                    result.set(1,brr[j]);
                }
            }
        }
        return result;
    }
}


// optimal approach

class Solution{
    
    // Function for finding maximum and value pair
    public static ArrayList<Integer> printClosest (int arr[], int brr[], int n, int m, int x) {
        // code here
        ArrayList<Integer> result=new ArrayList<>();
        int diff=Integer.MAX_VALUE,l=0,r=m-1;
        int a=-1;int b=-1; 
        while(l<n&& r>=0){
            if(Math.abs(arr[l]+brr[r]-x)<diff){
                a=arr[l];
                b=brr[r];
                diff=Math.abs(arr[l]+brr[r]-x);
            }
            else if(arr[l]+brr[r]>x) r--;
            else l++;
        }
        result.add(a);
        result.add(b);
        return result;
       
    }
}
